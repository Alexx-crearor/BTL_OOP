package com.arkanoid.game.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Qu·∫£n l√Ω high scores - ƒë·ªçc/ghi t·ª´ file
 */
public class HighScoreManager {
    private static final String HIGH_SCORE_FILE = "highscores.txt";
    private static final int MAX_HIGH_SCORES = 10;
    
    private List<HighScoreEntry> highScores;
    
    public HighScoreManager() {
        highScores = new ArrayList<>();
        loadHighScores();
    }
    
    /**
     * ƒê·ªçc high scores t·ª´ file
     */
    private void loadHighScores() {
        Path filePath = Paths.get(HIGH_SCORE_FILE);
        
        if (!Files.exists(filePath)) {
            // File ch∆∞a t·ªìn t·∫°i, b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng
            // Ch·ªâ l∆∞u khi c√≥ ng∆∞·ªùi ch∆°i game over v√† nh·∫≠p t√™n
            System.out.println("üìù High score file not found. Starting with empty list.");
            return;
        }
        
        try (BufferedReader reader = new BufferedReader(new FileReader(HIGH_SCORE_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                HighScoreEntry entry = HighScoreEntry.fromString(line);
                if (entry != null) {
                    highScores.add(entry);
                }
            }
            
            // S·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn
            Collections.sort(highScores);
            
            System.out.println("‚úÖ Loaded " + highScores.size() + " high scores from file.");
            
        } catch (IOException e) {
            System.err.println("‚ùå Error loading high scores: " + e.getMessage());
            // L·ªói ƒë·ªçc file ‚Üí b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng
            highScores.clear();
        }
    }
    

    
    /**
     * L∆∞u high scores v√†o file
     */
    public void saveHighScores() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(HIGH_SCORE_FILE))) {
            for (HighScoreEntry entry : highScores) {
                writer.write(entry.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error saving high scores: " + e.getMessage());
        }
    }
    
    /**
     * Ki·ªÉm tra xem ƒëi·ªÉm c√≥ ƒë·ªß v√†o top 10 kh√¥ng
     */
    public boolean isHighScore(int score) {
        if (highScores.size() < MAX_HIGH_SCORES) {
            return true; // C√≤n ch·ªó tr·ªëng
        }
        
        // Ki·ªÉm tra xem ƒëi·ªÉm c√≥ cao h∆°n ƒëi·ªÉm th·∫•p nh·∫•t kh√¥ng
        return score > highScores.get(highScores.size() - 1).getScore();
    }
    
    /**
     * Th√™m high score m·ªõi
     */
    public void addHighScore(String playerName, int score) {
        // Gi·ªõi h·∫°n ƒë·ªô d√†i t√™n
        if (playerName == null || playerName.trim().isEmpty()) {
            playerName = "PLAYER";
        }
        playerName = playerName.trim().substring(0, Math.min(playerName.length(), 15));
        
        HighScoreEntry newEntry = new HighScoreEntry(playerName, score);
        highScores.add(newEntry);
        
        // S·∫Øp x·∫øp l·∫°i
        Collections.sort(highScores);
        
        // Gi·ªØ ch·ªâ top 10
        if (highScores.size() > MAX_HIGH_SCORES) {
            highScores = highScores.subList(0, MAX_HIGH_SCORES);
        }
        
        // L∆∞u v√†o file
        saveHighScores();
    }
    
    /**
     * L·∫•y danh s√°ch high scores
     */
    public List<HighScoreEntry> getHighScores() {
        return new ArrayList<>(highScores);
    }
    
    /**
     * L·∫•y v·ªã tr√≠ c·ªßa ƒëi·ªÉm trong b·∫£ng x·∫øp h·∫°ng (1-based)
     * Tr·∫£ v·ªÅ -1 n·∫øu kh√¥ng v√†o top 10
     */
    public int getRank(int score) {
        for (int i = 0; i < highScores.size(); i++) {
            if (score > highScores.get(i).getScore()) {
                return i + 1;
            }
        }
        
        if (highScores.size() < MAX_HIGH_SCORES) {
            return highScores.size() + 1;
        }
        
        return -1; // Kh√¥ng v√†o top 10
    }
}
